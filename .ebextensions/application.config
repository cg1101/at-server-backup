option_settings:
  aws:elasticbeanstalk:container:python:
    StaticFiles: /static/=app/static/
    WSGIPath: application.py

files:
  /home/ec2-user/.bashrc:
    mode: "000644"
    owner: ec2-user
    group: ec2-user
    content: |
      # .bashrc
      # Source global definitions
      if [ -f /etc/bashrc ]; then
        . /etc/bashrc
      fi
      # User specific aliases and functions
      [ -e /opt/python/current/env ] && source /opt/python/current/env
      [ -e ~/.aliases ] && source ~/.aliases

  /home/ec2-user/.aliases:
    mode: "000644"
    owner: ec2-user
    group: ec2-user
    content: |
      alias app='cd /opt/python/current/app'
      alias conf='cd /etc/httpd/conf.d'
      alias log='cd /var/log/httpd'
      alias reload='sudo /etc/init.d/httpd reload'
      alias db='psql ${DATABASE_URI}'
      alias al='cat /var/log/httpd/access_log'
      alias el='cat /var/log/httpd/error_log'
      alias tal='tail -f /var/log/httpd/access_log'
      alias tel='tail -f /var/log/httpd/error_log'

  /etc/httpd/conf.d/wsgi_auth.conf:
    mode: "000644"
    owner: root
    group: root
    content: |
      WSGIPAssAuthorization On

  /etc/crontab:
    mode: "000644"
    owner: root
    group: root
    content: |
      SHELL=/bin/bash
      PATH=/sbin:/bin:/usr/sbin:/usr/bin
      MAILTO=root
      HOME=/
      # For details see man 4 crontabs
      # Example of job definition:
      # .---------------- minute (0 - 59)
      # |  .------------- hour (0 - 23)
      # |  |  .---------- day of month (1 - 31)
      # |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...
      # |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat
      # |  |  |  |  |
      # *  *  *  *  * user-name command to be executed
      #
      # TODO: add jobs here
      RUN_JOB=/opt/python/other/run-job.sh
      */2  *  *  *   * root ${RUN_JOB} heartbeat                  >>/var/log/run_job.log
      30   *  *  *   * root ${RUN_JOB} reclaim-expired-batches    >>/var/log/run_job.log
      45   *  *  *   * root ${RUN_JOB} create-qa                  >>/var/log/run_job.log
      05 */2  *  *   * root ${RUN_JOB} update-task-report-metrics >>/var/log/run_job.log
      35 */2  *  *   * root ${RUN_JOB} update-task-reports        >>/var/log/run_job.log
      55  19  *  *   * root ${RUN_JOB} progress-work-intervals    >>/var/log/run_job.log
      55  21  *  *   * root ${RUN_JOB} collapse-payable-events    >>/var/log/run_job.log
      50  23  *  *   5 root ${RUN_JOB} end-work-intervals         >>/var/log/run_job.log
      05  03  *  * 2,6 root ${RUN_JOB} update-payroll-status      >>/var/log/run_job.log
      15 */8  *  *   * root ${RUN_JOB} load-qa-failed             >>/var/log/run_job.log


  /etc/httpd/conf.d/ssl_rewrite.conf:
    mode: "000644"
    owner: root
    group: root
    content: |
      RewriteEngine on
      <If "-n '%{HTTP:X-Forwarded-Proto}' && %{HTTP:X-Forwarded-Proto} != 'https'">
      RewriteRule (.*) https://%{HTTP_HOST}%{REQUEST_URI} [R,L]
      </If>

  /opt/python/other/is-leader.py:
    mode: "000644"
    owner: root
    group: root
    content: |
      #!/usr/bin/env python

      import sys
      import urllib2

      import boto.ec2.autoscale

      my_id = urllib2.urlopen(
        'http://169.254.169.254/latest/meta-data/instance-id').read()

      instances = boto.ec2.autoscale.connect_to_region('ap-southeast-2'
        ).get_all_autoscaling_instances()

      my_group = [i for i in instances if i.instance_id == my_id][0].group_name

      ids = sorted([i.instance_id for i in instances if
        i.lifecycle_state == 'InService'and i.group_name == my_group])

      sys.exit(ids[0] != my_id)

  /opt/python/other/run-job.sh:
    mode: "000744"
    owner: root
    group: root
    content: |
      #!/bin/bash

      TIMESTAMP=$(date +%Y-%m-%dT%H:%M:%S%z)
      echo -e "\n+++ ${0##*/}: started  @ ${TIMESTAMP} +++"

      DIR=$(dirname $0)
      if python ${DIR}/is-leader.py >/dev/null 2>&1; then
        echo "command to execute: ${0} $*"
        if (( $# > 0 )) && [ "$1" != "heartbeat" ]; then
          LOG=/var/log/cronjob/${TIMESTAMP}-${1:-unknown}.log
          LOG_DIR=${LOG%/*}
          if [ ! -e ${LOG_DIR} ]; then
            mkdir -p ${LOG_DIR}
          fi
          echo -e "--- ${0##*/}: see ${LOG} ---\n"
          exec >${LOG} 2>&1
          cd /opt/python/current/app
          source ../env
          python ./gnx.py job $*
        fi
      else
        # not group leader, do nothing
        echo "not group leader, skipping"
      fi
      echo -e "--- ${0##*/}: finished @ `date +%Y-%m-%dT%H:%M:%S%z` ---\n"
